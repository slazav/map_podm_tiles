#!/bin/sh -fu

if [ $# -ne 0 ]
then
  . ./$1
else
  . ./settings.sh
fi

######################################################################

update_png_tile(){
  local x=$1;
  local y=$2;
  local fig="$fig_dir/t$x-$y.fig"
  local png="$png_dir/t$x-${y}_opaque.png"
  local png32="$png_dir/t$x-${y}_32.png"
  local pngt="$png_dir/t$x-$y.png"

  if [ -z "$use_edited_border" ]; then
    png="$pngt"
  fi


  [ -f "$fig" ] || return 0
  
  echo "tile: $x $y"
  
  if [ -f "$png" -a "$fig" -ot "$png" ]
  then
    echo "Up to date"
    return 0
  fi
  calc mag "2^($maxZoom-$sc)"
  vmap_render --transp_margins 1 --rscale=50000 --mag $mag --google "$x,$y,$sc" "$fig" "$png"
  [ -e "$png" ] || return 0

  if [ -n "$use_edited_border" ]; then
    # crop image according to boundary
    node "editborder/crop_tile.js" "editborder/boundary.json" "$png" "$png32" "$x" "$y" "$sc" "$maxZoom"

    #threshold is used to binarize transparency channel: we have only one color for transparency in palette
    convert "$png32" -channel A -threshold 99% +dither -remap palette/palette.png "$pngt"
  else
    convert "$png" +dither -remap palette/palette.png "$pngt"
  fi


  make_tiles "$x" "$y"
}

make_tiles(){ # make 256x256 tiles
  local x=$1;
  local y=$2;

  local src="$png_dir/t$x-$y.png"
  local srcSize=$tile_size_px
  local finalSize=256
  for zz in $(seq $maxZoom -1 $sc); do
    echo "  create tiles Z${zz}..."
    local tile_count="$(($srcSize/256))"
    local tiles="$(mktemp -u tileXXXXXX)"
    local curSrc
    local tsBefCrop="$(date +%s)"
    if [ "$zz" -eq "$maxZoom" ]; then
      convert "$src" +gravity -crop 256x256 "$tile_tmp_dir/$tiles-%d.png"
    else
      curSrc="$(mktemp -u srcXXXXXX.png)"
      convert "$src" -resize "${srcSize}x${srcSize}" "$curSrc"
      convert "$curSrc" +gravity -crop 256x256 "$tile_tmp_dir/$tiles-%d.png"
      rm $curSrc
    fi
    local tsAftCrop="$(date +%s)"
    for xx in $(seq 1 $tile_count); do
      for yy in $(seq 1 $tile_count); do
        # name of converted tile
        local n="$(($xx-1 + ($yy-1)*$tile_count))"
        local png="$tile_tmp_dir/$tiles-$n.png"
        # absolute.
        local ax="$(($x * $tile_count + $xx - 1))"
        local ay="$(($y * $tile_count + $yy - 1))"

        [ -f "$png" ] || echo "Error: can't find $n-th tile (${ax},${ay})!"
        local minAlpha="$(convert "$png" -matte -channel A -separate -format "%[fx:image.minima]" info:)"
        if [ $minAlpha != "1" ]; then
          cp "$png" "$tile_dir/Z${zz}/${ay}_${ax}.png"
        fi
        rm "$png"
      done
    done
    local tsAftCopy="$(date +%s)"
    echo "Time (split/optimize): $(($tsAftCrop-$tsBefCrop))/$(($tsAftCopy-$tsAftCrop))" 
    srcSize=$(($srcSize/2))
  done
}


######################################################################

mkdir -p -- "$png_dir" "$tile_dir" "$tile_tmp_dir"

for z in $(seq $sc $maxZoom); do
  mkdir -p "${tile_dir}/Z${z}"
done

for x in $(seq $x1 $x2); do
  for y in $(seq $y1 $y2); do
    update_png_tile "$x" "$y"
  done
done
